{
  "openapi": "3.1.0",
  "info": {
    "title": "Fullstack Template API",
    "description": "FastAPI backend with authentication and AI integration",
    "version": "0.1.3"
  },
  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["authentication"],
        "summary": "Register",
        "description": "Register a new user.",
        "operationId": "register_auth_register_post",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UserCreate" } }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserRead" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["authentication"],
        "summary": "Login",
        "description": "Login with email and password to get access and refresh tokens.",
        "operationId": "login_auth_login_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Token" } }
            }
          }
        },
        "security": [{ "HTTPBasic": [] }]
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": ["authentication"],
        "summary": "Refresh",
        "description": "Refresh access token using refresh token.",
        "operationId": "refresh_auth_refresh_post",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/RefreshTokenRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Token" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["authentication"],
        "summary": "Logout",
        "description": "Logout user (token blacklist will be implemented with Redis in Phase 7).",
        "operationId": "logout_auth_logout_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": { "type": "string" },
                  "type": "object",
                  "title": "Response Logout Auth Logout Post"
                }
              }
            }
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "tags": ["authentication"],
        "summary": "Get Current User Info",
        "description": "Get current authenticated user information.",
        "operationId": "get_current_user_info_auth_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserRead" } }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/chat/conversations": {
      "get": {
        "tags": ["chat"],
        "summary": "List Conversations",
        "description": "List all conversations for the current user.",
        "operationId": "list_conversations_chat_conversations_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConversationList" } }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      },
      "post": {
        "tags": ["chat"],
        "summary": "Create Conversation",
        "description": "Create a new conversation.",
        "operationId": "create_conversation_chat_conversations_post",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ConversationCreate" } }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConversationRead" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/chat/conversations/{conversation_id}": {
      "get": {
        "tags": ["chat"],
        "summary": "Get Conversation",
        "description": "Get a conversation by ID.",
        "operationId": "get_conversation_chat_conversations__conversation_id__get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Conversation Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConversationRead" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["chat"],
        "summary": "Update Conversation",
        "description": "Update a conversation.",
        "operationId": "update_conversation_chat_conversations__conversation_id__patch",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Conversation Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/ConversationUpdate" } }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ConversationRead" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["chat"],
        "summary": "Delete Conversation",
        "description": "Delete a conversation.",
        "operationId": "delete_conversation_chat_conversations__conversation_id__delete",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Conversation Id" }
          }
        ],
        "responses": {
          "204": { "description": "Successful Response" },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/chat/conversations/{conversation_id}/messages": {
      "get": {
        "tags": ["chat"],
        "summary": "List Messages",
        "description": "List all messages in a conversation.",
        "operationId": "list_messages_chat_conversations__conversation_id__messages_get",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Conversation Id" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MessageList" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["chat"],
        "summary": "Create Message",
        "description": "Create a new message in a conversation.\n\nNote: In Phase 3, this only stores the message without AI response.\nAI integration will be added in Phase 4.",
        "operationId": "create_message_chat_conversations__conversation_id__messages_post",
        "security": [{ "HTTPBearer": [] }],
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "format": "uuid", "title": "Conversation Id" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/MessageCreate" } }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/MessageRead" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/health_check": {
      "get": {
        "summary": "Health Check",
        "description": "Health check endpoint to verify API is running.\n\nArgs:\n    check_db: If True, also checks database connectivity",
        "operationId": "health_check_health_check_get",
        "parameters": [
          {
            "name": "check_db",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false, "title": "Check Db" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [{ "type": "string" }, { "type": "boolean" }]
                  },
                  "title": "Response Health Check Health Check Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ConversationCreate": {
        "properties": {
          "title": { "type": "string", "maxLength": 255, "minLength": 1, "title": "Title" },
          "ai_provider": {
            "type": "string",
            "pattern": "^(openai|anthropic|gemini|grok)$",
            "title": "Ai Provider",
            "default": "openai"
          },
          "ai_model": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Ai Model",
            "default": "gpt-4"
          },
          "system_prompt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "System Prompt"
          }
        },
        "type": "object",
        "required": ["title"],
        "title": "ConversationCreate",
        "description": "Schema for creating a new conversation."
      },
      "ConversationList": {
        "properties": {
          "conversations": {
            "items": { "$ref": "#/components/schemas/ConversationRead" },
            "type": "array",
            "title": "Conversations"
          },
          "total": { "type": "integer", "title": "Total" }
        },
        "type": "object",
        "required": ["conversations", "total"],
        "title": "ConversationList",
        "description": "Schema for listing conversations."
      },
      "ConversationRead": {
        "properties": {
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "user_id": { "type": "string", "format": "uuid", "title": "User Id" },
          "title": { "type": "string", "title": "Title" },
          "ai_provider": { "type": "string", "title": "Ai Provider" },
          "ai_model": { "type": "string", "title": "Ai Model" },
          "system_prompt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "System Prompt"
          },
          "created_at": { "type": "string", "format": "date-time", "title": "Created At" },
          "updated_at": { "type": "string", "format": "date-time", "title": "Updated At" }
        },
        "type": "object",
        "required": [
          "id",
          "user_id",
          "title",
          "ai_provider",
          "ai_model",
          "system_prompt",
          "created_at",
          "updated_at"
        ],
        "title": "ConversationRead",
        "description": "Schema for reading a conversation."
      },
      "ConversationUpdate": {
        "properties": {
          "title": {
            "anyOf": [{ "type": "string", "maxLength": 255, "minLength": 1 }, { "type": "null" }],
            "title": "Title"
          },
          "system_prompt": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "System Prompt"
          }
        },
        "type": "object",
        "title": "ConversationUpdate",
        "description": "Schema for updating a conversation."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "MessageCreate": {
        "properties": {
          "role": { "type": "string", "pattern": "^(user|assistant|system)$", "title": "Role" },
          "content": { "type": "string", "minLength": 1, "title": "Content" },
          "tokens_used": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Tokens Used"
          },
          "meta": {
            "anyOf": [{ "additionalProperties": true, "type": "object" }, { "type": "null" }],
            "title": "Meta"
          }
        },
        "type": "object",
        "required": ["role", "content"],
        "title": "MessageCreate",
        "description": "Schema for creating a new message."
      },
      "MessageList": {
        "properties": {
          "messages": {
            "items": { "$ref": "#/components/schemas/MessageRead" },
            "type": "array",
            "title": "Messages"
          },
          "total": { "type": "integer", "title": "Total" }
        },
        "type": "object",
        "required": ["messages", "total"],
        "title": "MessageList",
        "description": "Schema for listing messages."
      },
      "MessageRead": {
        "properties": {
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "conversation_id": { "type": "string", "format": "uuid", "title": "Conversation Id" },
          "role": { "type": "string", "title": "Role" },
          "content": { "type": "string", "title": "Content" },
          "tokens_used": {
            "anyOf": [{ "type": "integer" }, { "type": "null" }],
            "title": "Tokens Used"
          },
          "meta": {
            "anyOf": [{ "additionalProperties": true, "type": "object" }, { "type": "null" }],
            "title": "Meta"
          },
          "created_at": { "type": "string", "format": "date-time", "title": "Created At" }
        },
        "type": "object",
        "required": [
          "id",
          "conversation_id",
          "role",
          "content",
          "tokens_used",
          "meta",
          "created_at"
        ],
        "title": "MessageRead",
        "description": "Schema for reading a message."
      },
      "RefreshTokenRequest": {
        "properties": { "refresh_token": { "type": "string", "title": "Refresh Token" } },
        "type": "object",
        "required": ["refresh_token"],
        "title": "RefreshTokenRequest",
        "description": "Refresh token request schema."
      },
      "Token": {
        "properties": {
          "access_token": { "type": "string", "title": "Access Token" },
          "refresh_token": { "type": "string", "title": "Refresh Token" },
          "token_type": { "type": "string", "title": "Token Type", "default": "bearer" }
        },
        "type": "object",
        "required": ["access_token", "refresh_token"],
        "title": "Token",
        "description": "Token response schema."
      },
      "UserCreate": {
        "properties": {
          "email": { "type": "string", "format": "email", "title": "Email" },
          "full_name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Full Name"
          },
          "password": { "type": "string", "maxLength": 100, "minLength": 8, "title": "Password" }
        },
        "type": "object",
        "required": ["email", "password"],
        "title": "UserCreate",
        "description": "Schema for creating a new user."
      },
      "UserRead": {
        "properties": {
          "email": { "type": "string", "format": "email", "title": "Email" },
          "full_name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Full Name"
          },
          "id": { "type": "string", "format": "uuid", "title": "Id" },
          "created_at": { "type": "string", "format": "date-time", "title": "Created At" },
          "updated_at": { "type": "string", "format": "date-time", "title": "Updated At" }
        },
        "type": "object",
        "required": ["email", "id", "created_at", "updated_at"],
        "title": "UserRead",
        "description": "Schema for reading user data."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array",
            "title": "Location"
          },
          "msg": { "type": "string", "title": "Message" },
          "type": { "type": "string", "title": "Error Type" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "HTTPBasic": { "type": "http", "scheme": "basic" },
      "HTTPBearer": { "type": "http", "scheme": "bearer" }
    }
  }
}
