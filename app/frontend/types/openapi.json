{
  "openapi": "3.1.0",
  "info": {
    "title": "Fullstack Template API",
    "description": "FastAPI backend with authentication and AI integration",
    "version": "0.1.3"
  },
  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["authentication"],
        "summary": "Register",
        "description": "Register a new user.",
        "operationId": "register_auth_register_post",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/UserCreate" } }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserRead" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["authentication"],
        "summary": "Login",
        "description": "Login with email and password to get access and refresh tokens.",
        "operationId": "login_auth_login_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Token" } }
            }
          }
        },
        "security": [{ "HTTPBasic": [] }]
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": ["authentication"],
        "summary": "Refresh",
        "description": "Refresh access token using refresh token.",
        "operationId": "refresh_auth_refresh_post",
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/RefreshTokenRequest" } }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/Token" } }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": ["authentication"],
        "summary": "Logout",
        "description": "Logout user (token blacklist will be implemented with Redis in Phase 7).",
        "operationId": "logout_auth_logout_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": { "type": "string" },
                  "type": "object",
                  "title": "Response Logout Auth Logout Post"
                }
              }
            }
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "tags": ["authentication"],
        "summary": "Get Current User Info",
        "description": "Get current authenticated user information.",
        "operationId": "get_current_user_info_auth_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/UserRead" } }
            }
          }
        },
        "security": [{ "HTTPBearer": [] }]
      }
    },
    "/health_check": {
      "get": {
        "summary": "Health Check",
        "description": "Health check endpoint to verify API is running.\n\nArgs:\n    check_db: If True, also checks database connectivity",
        "operationId": "health_check_health_check_get",
        "parameters": [
          {
            "name": "check_db",
            "in": "query",
            "required": false,
            "schema": { "type": "boolean", "default": false, "title": "Check Db" }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "anyOf": [{ "type": "string" }, { "type": "boolean" }]
                  },
                  "title": "Response Health Check Health Check Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/HTTPValidationError" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": { "$ref": "#/components/schemas/ValidationError" },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "RefreshTokenRequest": {
        "properties": { "refresh_token": { "type": "string", "title": "Refresh Token" } },
        "type": "object",
        "required": ["refresh_token"],
        "title": "RefreshTokenRequest",
        "description": "Refresh token request schema."
      },
      "Token": {
        "properties": {
          "access_token": { "type": "string", "title": "Access Token" },
          "refresh_token": { "type": "string", "title": "Refresh Token" },
          "token_type": { "type": "string", "title": "Token Type", "default": "bearer" }
        },
        "type": "object",
        "required": ["access_token", "refresh_token"],
        "title": "Token",
        "description": "Token response schema."
      },
      "UserCreate": {
        "properties": {
          "email": { "type": "string", "format": "email", "title": "Email" },
          "full_name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Full Name"
          },
          "password": { "type": "string", "maxLength": 100, "minLength": 8, "title": "Password" }
        },
        "type": "object",
        "required": ["email", "password"],
        "title": "UserCreate",
        "description": "Schema for creating a new user."
      },
      "UserRead": {
        "properties": {
          "email": { "type": "string", "format": "email", "title": "Email" },
          "full_name": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Full Name"
          },
          "id": { "type": "integer", "title": "Id" },
          "created_at": { "type": "string", "format": "date-time", "title": "Created At" },
          "updated_at": { "type": "string", "format": "date-time", "title": "Updated At" }
        },
        "type": "object",
        "required": ["email", "id", "created_at", "updated_at"],
        "title": "UserRead",
        "description": "Schema for reading user data."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": { "anyOf": [{ "type": "string" }, { "type": "integer" }] },
            "type": "array",
            "title": "Location"
          },
          "msg": { "type": "string", "title": "Message" },
          "type": { "type": "string", "title": "Error Type" }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "HTTPBasic": { "type": "http", "scheme": "basic" },
      "HTTPBearer": { "type": "http", "scheme": "bearer" }
    }
  }
}
